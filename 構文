予約語
i32
i64
f32
f64
string
bool
char
true
false
null
let
if
while
return
struct
fun
extern

type : i32 | i64 | f32 | f64 | string | [<type>] | bool | char | <ident>
ident:[a-zA-Z][a-zA-Z0-9]*

expr : <parens> | <call> | <literal> | <calc>
prefix_op: !
op : + | - | * | / | % | && | || | & | | | ^ | ** | == | < | <= | > | >=
suffix_op : [<expr>]
literal : <struct_literal> | <i32_literal> | <i64_literal> | <f32_literal> | <f64_literal> | <string_literal> | <array_literal> | <bool_literal> | <char_literal> | <null_literal>
num:[0-9]+
int_literal:-?<num>
float_literal : -?<num>.<num>
array_literal : [<type>;<expr>*]
struct_literal : <ident>{(<ident>:<expr>,)+}
string_literal : "<char>*"
boolean_literal : true | false
char_literal : '<char>'
null_literal : null
char : この余白はそれを書くには狭すぎる
call : <ident>((<expr>,)*)
parens : (<expr>)
calc : <expr><op><expr> | <prefix_op><expr> | <expr><suffix_op>

stat: <block> | <expr2stat> | <let> | <return> | <while> | <if> | <set>
block: {(<stat>)+}
expr2stat: <expr>;
let: let <ident>:<type> = <expr>;
if: if(<expr>)<stat>
while: while(<expr>)<stat>
return: return <expr>?;
set: <set_ident>=<expr>;
set_ident:<ident>|<set_ident>.<ident>|<set_ident>[<expr>]

member: <function> | <struct> | <extern_function>
struct: struct <ident>{(<ident>:<type>,)*}
function:fun <ident>((<ident>:<type>,)*)(:<type>)? = <stat>
extern_function:extern fun <string_literal> <ident>((<ident>:<type>,)*)(:<type>)?